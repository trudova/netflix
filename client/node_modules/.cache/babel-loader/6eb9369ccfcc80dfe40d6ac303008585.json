{"ast":null,"code":"const ListReducer = (state, action) => {\n  switch (action.type) {\n    case \"GET_LISTS_START\":\n      return {\n        lists: [],\n        isFetching: true,\n        error: false\n      };\n\n    case \"GET_LISTS_SUCCESS\":\n      return {\n        lists: action.payload,\n        isFetching: false,\n        error: false\n      };\n\n    case \"GET_LISTS_FAILURE\":\n      return {\n        lists: [],\n        isFetching: false,\n        error: true\n      };\n\n    case \"CREATE_LIST_START\":\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case \"CREATE_LIST_SUCCESS\":\n      return {\n        lists: [...state.lists, action.payload],\n        isFetching: false,\n        error: false\n      };\n\n    case \"CREATE_LIST_FAILURE\":\n      return { ...state,\n        isFetching: false,\n        error: true\n      };\n\n    case \"UPLOAD_LIST_START\":\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case \"UPLOAD_LIST_SUCCESS\":\n      return {\n        lists: state.lists.map(list => list._id === action.payload._id && action.payload),\n        isFetching: false,\n        error: false\n      };\n\n    case \"UPLOAD_LIST_FAILURE\":\n      return { ...state,\n        isFetching: false,\n        error: true\n      };\n\n    case \"DELETE_LIST_START\":\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case \"DELETE_LIST_SUCCESS\":\n      return {\n        lists: state.lists.filter(list => list._id !== action.payload),\n        isFetching: false,\n        error: false\n      };\n\n    case \"DELETE_LIST_FAILURE\":\n      return { ...state,\n        isFetching: false,\n        error: true\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\n_c = ListReducer;\nexport default ListReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListReducer\");","map":{"version":3,"sources":["/Users/liubovtrudova/Desktop/PROJECTS/ntflex clone/netflex/client/src/context/listContext/ListReducer.js"],"names":["ListReducer","state","action","type","lists","isFetching","error","payload","map","list","_id","filter"],"mappings":"AAAA,MAAMA,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,iBAAL;AACE,aAAO;AACLC,QAAAA,KAAK,EAAE,EADF;AAELC,QAAAA,UAAU,EAAE,IAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,mBAAL;AACE,aAAO;AACLF,QAAAA,KAAK,EAAEF,MAAM,CAACK,OADT;AAELF,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,mBAAL;AACE,aAAO;AACLF,QAAAA,KAAK,EAAE,EADF;AAELC,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,mBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELI,QAAAA,UAAU,EAAE,IAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,qBAAL;AACE,aAAO;AACLF,QAAAA,KAAK,EAAE,CAAC,GAAGH,KAAK,CAACG,KAAV,EAAiBF,MAAM,CAACK,OAAxB,CADF;AAELF,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,qBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELI,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,mBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELI,QAAAA,UAAU,EAAE,IAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,qBAAL;AACE,aAAO;AACLF,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYI,GAAZ,CACJC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACK,OAAP,CAAeG,GAA5B,IAAmCR,MAAM,CAACK,OAD/C,CADF;AAILF,QAAAA,UAAU,EAAE,KAJP;AAKLC,QAAAA,KAAK,EAAE;AALF,OAAP;;AAOF,SAAK,qBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELI,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,mBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELI,QAAAA,UAAU,EAAE,IAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,qBAAL;AACE,aAAO;AACLF,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYO,MAAZ,CAAoBF,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACK,OAAjD,CADF;AAELF,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,qBAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELI,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF;AACE,aAAO,EAAE,GAAGL;AAAL,OAAP;AA5EJ;AA8ED,CA/ED;;KAAMD,W;AAiFN,eAAeA,WAAf","sourcesContent":["const ListReducer = (state, action) => {\n  switch (action.type) {\n    case \"GET_LISTS_START\":\n      return {\n        lists: [],\n        isFetching: true,\n        error: false,\n      };\n    case \"GET_LISTS_SUCCESS\":\n      return {\n        lists: action.payload,\n        isFetching: false,\n        error: false,\n      };\n    case \"GET_LISTS_FAILURE\":\n      return {\n        lists: [],\n        isFetching: false,\n        error: true,\n      };\n    case \"CREATE_LIST_START\":\n      return {\n        ...state,\n        isFetching: true,\n        error: false,\n      };\n    case \"CREATE_LIST_SUCCESS\":\n      return {\n        lists: [...state.lists, action.payload],\n        isFetching: false,\n        error: false,\n      };\n    case \"CREATE_LIST_FAILURE\":\n      return {\n        ...state,\n        isFetching: false,\n        error: true,\n      };\n    case \"UPLOAD_LIST_START\":\n      return {\n        ...state,\n        isFetching: true,\n        error: false,\n      };\n    case \"UPLOAD_LIST_SUCCESS\":\n      return {\n        lists: state.lists.map(\n          (list) => list._id === action.payload._id && action.payload\n        ),\n        isFetching: false,\n        error: false,\n      };\n    case \"UPLOAD_LIST_FAILURE\":\n      return {\n        ...state,\n        isFetching: false,\n        error: true,\n      };\n    case \"DELETE_LIST_START\":\n      return {\n        ...state,\n        isFetching: true,\n        error: false,\n      };\n    case \"DELETE_LIST_SUCCESS\":\n      return {\n        lists: state.lists.filter((list) => list._id !== action.payload),\n        isFetching: false,\n        error: false,\n      };\n    case \"DELETE_LIST_FAILURE\":\n      return {\n        ...state,\n        isFetching: false,\n        error: true,\n      };\n    default:\n      return { ...state };\n  }\n};\n\nexport default ListReducer;"]},"metadata":{},"sourceType":"module"}